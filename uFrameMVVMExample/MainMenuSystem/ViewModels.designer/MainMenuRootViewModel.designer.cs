// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace Example {
    using Example;
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using uFrame.IOC;
    using uFrame.Kernel;
    using uFrame.Kernel.Serialization;
    using uFrame.MVVM;
    using uFrame.MVVM.Bindings;
    using uFrame.MVVM.ViewModels;
    using UniRx;
    using UnityEngine;
    
    
    public partial class MainMenuRootViewModelBase : uFrame.MVVM.ViewModels.ViewModel {
        
        private P<Type> _CurrentScreenTypeProperty;
        
        private ModelCollection<SubScreenViewModel> _Screens;
        
        public MainMenuRootViewModelBase(uFrame.Kernel.IEventAggregator aggregator) : 
                base(aggregator) {
        }
        
        public virtual P<Type> CurrentScreenTypeProperty {
            get {
                return _CurrentScreenTypeProperty;
            }
            set {
                _CurrentScreenTypeProperty = value;
            }
        }
        
        public virtual Type CurrentScreenType {
            get {
                return CurrentScreenTypeProperty.Value;
            }
            set {
                CurrentScreenTypeProperty.Value = value;
            }
        }
        
        public virtual ModelCollection<SubScreenViewModel> Screens {
            get {
                return _Screens;
            }
            set {
                _Screens = value;
            }
        }
        
        public override void Bind() {
            base.Bind();
            _CurrentScreenTypeProperty = new P<Type>(this, "CurrentScreenType");
            _Screens = new ModelCollection<SubScreenViewModel>(this, "Screens");
        }
        
        public override void Read(uFrame.Kernel.Serialization.ISerializerStream stream) {
            base.Read(stream);
            if (stream.DeepSerialize) {
                this.Screens.Clear();
                this.Screens.AddRange(stream.DeserializeObjectArray<SubScreenViewModel>("Screens"));
            }
        }
        
        public override void Write(uFrame.Kernel.Serialization.ISerializerStream stream) {
            base.Write(stream);
            if (stream.DeepSerialize) stream.SerializeArray("Screens", this.Screens);
        }
        
        protected override void FillCommands(System.Collections.Generic.List<uFrame.MVVM.ViewModels.ViewModelCommandInfo> list) {
            base.FillCommands(list);
        }
        
        protected override void FillProperties(System.Collections.Generic.List<uFrame.MVVM.ViewModels.ViewModelPropertyInfo> list) {
            base.FillProperties(list);
            // PropertiesChildItem
            list.Add(new ViewModelPropertyInfo(_CurrentScreenTypeProperty, false, false, false, false));
            list.Add(new ViewModelPropertyInfo(_Screens, true, true, false, false));
        }
    }
    
    public partial class MainMenuRootViewModel {
        
        public MainMenuRootViewModel(uFrame.Kernel.IEventAggregator aggregator) : 
                base(aggregator) {
        }
    }
}
