// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace Example {
    using Example;
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using uFrame.IOC;
    using uFrame.Kernel;
    using uFrame.Kernel.Serialization;
    using uFrame.MVVM;
    using uFrame.MVVM.Bindings;
    using uFrame.MVVM.ViewModels;
    using UniRx;
    using UnityEngine;
    
    
    public partial class SettingScreenViewModelBase : SubScreenViewModel {
        
        private P<ResolutionInformation> _ResolutionProperty;
        
        private P<Single> _VolumeProperty;
        
        private ModelCollection<ResolutionInformation> _AvailableResolutions;
        
        private Signal<DefaultCommand> _Default;
        
        private Signal<ApplyCommand> _Apply;
        
        public SettingScreenViewModelBase(uFrame.Kernel.IEventAggregator aggregator) : 
                base(aggregator) {
        }
        
        public virtual P<ResolutionInformation> ResolutionProperty {
            get {
                return _ResolutionProperty;
            }
            set {
                _ResolutionProperty = value;
            }
        }
        
        public virtual P<Single> VolumeProperty {
            get {
                return _VolumeProperty;
            }
            set {
                _VolumeProperty = value;
            }
        }
        
        public virtual ResolutionInformation Resolution {
            get {
                return ResolutionProperty.Value;
            }
            set {
                ResolutionProperty.Value = value;
            }
        }
        
        public virtual Single Volume {
            get {
                return VolumeProperty.Value;
            }
            set {
                VolumeProperty.Value = value;
            }
        }
        
        public virtual ModelCollection<ResolutionInformation> AvailableResolutions {
            get {
                return _AvailableResolutions;
            }
            set {
                _AvailableResolutions = value;
            }
        }
        
        public virtual Signal<DefaultCommand> Default {
            get {
                return _Default;
            }
            set {
                _Default = value;
            }
        }
        
        public virtual Signal<ApplyCommand> Apply {
            get {
                return _Apply;
            }
            set {
                _Apply = value;
            }
        }
        
        public override void Bind() {
            base.Bind();
            this.Default = new Signal<DefaultCommand>(this);
            this.Apply = new Signal<ApplyCommand>(this);
            _ResolutionProperty = new P<ResolutionInformation>(this, "Resolution");
            _VolumeProperty = new P<Single>(this, "Volume");
            _AvailableResolutions = new ModelCollection<ResolutionInformation>(this, "AvailableResolutions");
        }
        
        public virtual void ExecuteDefault() {
            this.Default.OnNext(new DefaultCommand());
        }
        
        public virtual void ExecuteApply() {
            this.Apply.OnNext(new ApplyCommand());
        }
        
        public override void Read(uFrame.Kernel.Serialization.ISerializerStream stream) {
            base.Read(stream);
            this.Volume = stream.DeserializeFloat("Volume");;
        }
        
        public override void Write(uFrame.Kernel.Serialization.ISerializerStream stream) {
            base.Write(stream);
            stream.SerializeFloat("Volume", this.Volume);
        }
        
        protected override void FillCommands(System.Collections.Generic.List<uFrame.MVVM.ViewModels.ViewModelCommandInfo> list) {
            base.FillCommands(list);
            list.Add(new ViewModelCommandInfo("Default", Default) { ParameterType = typeof(void) });
            list.Add(new ViewModelCommandInfo("Apply", Apply) { ParameterType = typeof(void) });
        }
        
        protected override void FillProperties(System.Collections.Generic.List<uFrame.MVVM.ViewModels.ViewModelPropertyInfo> list) {
            base.FillProperties(list);
            // PropertiesChildItem
            list.Add(new ViewModelPropertyInfo(_ResolutionProperty, false, false, false, false));
            // PropertiesChildItem
            list.Add(new ViewModelPropertyInfo(_VolumeProperty, false, false, false, false));
            list.Add(new ViewModelPropertyInfo(_AvailableResolutions, false, true, false, false));
        }
    }
    
    public partial class SettingScreenViewModel {
        
        public SettingScreenViewModel(uFrame.Kernel.IEventAggregator aggregator) : 
                base(aggregator) {
        }
    }
}
