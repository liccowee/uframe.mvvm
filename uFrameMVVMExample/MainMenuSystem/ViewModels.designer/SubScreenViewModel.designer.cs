// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace Example {
    using Example;
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using uFrame.IOC;
    using uFrame.Kernel;
    using uFrame.Kernel.Serialization;
    using uFrame.MVVM;
    using uFrame.MVVM.Bindings;
    using uFrame.MVVM.ViewModels;
    using UniRx;
    using UnityEngine;
    
    
    public partial class SubScreenViewModelBase : uFrame.MVVM.ViewModels.ViewModel {
        
        private P<Boolean> _IsActiveProperty;
        
        private Signal<CloseCommand> _Close;
        
        public SubScreenViewModelBase(uFrame.Kernel.IEventAggregator aggregator) : 
                base(aggregator) {
        }
        
        public virtual P<Boolean> IsActiveProperty {
            get {
                return _IsActiveProperty;
            }
            set {
                _IsActiveProperty = value;
            }
        }
        
        public virtual Boolean IsActive {
            get {
                return IsActiveProperty.Value;
            }
            set {
                IsActiveProperty.Value = value;
            }
        }
        
        public virtual Signal<CloseCommand> Close {
            get {
                return _Close;
            }
            set {
                _Close = value;
            }
        }
        
        public override void Bind() {
            base.Bind();
            this.Close = new Signal<CloseCommand>(this);
            _IsActiveProperty = new P<Boolean>(this, "IsActive");
        }
        
        public virtual void ExecuteClose() {
            this.Close.OnNext(new CloseCommand());
        }
        
        public override void Read(uFrame.Kernel.Serialization.ISerializerStream stream) {
            base.Read(stream);
            this.IsActive = stream.DeserializeBool("IsActive");;
        }
        
        public override void Write(uFrame.Kernel.Serialization.ISerializerStream stream) {
            base.Write(stream);
            stream.SerializeBool("IsActive", this.IsActive);
        }
        
        protected override void FillCommands(System.Collections.Generic.List<uFrame.MVVM.ViewModels.ViewModelCommandInfo> list) {
            base.FillCommands(list);
            list.Add(new ViewModelCommandInfo("Close", Close) { ParameterType = typeof(void) });
        }
        
        protected override void FillProperties(System.Collections.Generic.List<uFrame.MVVM.ViewModels.ViewModelPropertyInfo> list) {
            base.FillProperties(list);
            // PropertiesChildItem
            list.Add(new ViewModelPropertyInfo(_IsActiveProperty, false, false, false, false));
        }
    }
    
    public partial class SubScreenViewModel {
        
        public SubScreenViewModel(uFrame.Kernel.IEventAggregator aggregator) : 
                base(aggregator) {
        }
    }
}
