// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace Example {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using uFrame.Kernel;
    using uFrame.Kernel.Serialization;
    using uFrame.MVVM;
    using uFrame.MVVM.Bindings;
    using uFrame.MVVM.Services;
    using uFrame.MVVM.ViewModels;
    using UniRx;
    using UnityEngine;
    
    
    public class SettingsScreenViewBase : SubScreenView {
        
        [UnityEngine.SerializeField()]
        [uFrame.MVVM.Attributes.UFGroup("View Model Properties")]
        [UnityEngine.HideInInspector()]
        public ResolutionInformation _Resolution;
        
        [UnityEngine.SerializeField()]
        [uFrame.MVVM.Attributes.UFGroup("View Model Properties")]
        [UnityEngine.HideInInspector()]
        public Single _Volume;
        
        [uFrame.MVVM.Attributes.UFToggleGroup("Volume")]
        [UnityEngine.HideInInspector()]
        public bool _BindVolume = true;
        
        [uFrame.MVVM.Attributes.UFGroup("Volume")]
        [UnityEngine.SerializeField()]
        [UnityEngine.HideInInspector()]
        [UnityEngine.Serialization.FormerlySerializedAsAttribute("_Volumeslider")]
        protected UnityEngine.UI.Slider _VolumeSlider;
        
        [uFrame.MVVM.Attributes.UFToggleGroup("Default")]
        [UnityEngine.HideInInspector()]
        public bool _BindDefault = true;
        
        [uFrame.MVVM.Attributes.UFGroup("Default")]
        [UnityEngine.SerializeField()]
        [UnityEngine.HideInInspector()]
        [UnityEngine.Serialization.FormerlySerializedAsAttribute("_Defaultbutton")]
        protected UnityEngine.UI.Button _DefaultButton;
        
        [uFrame.MVVM.Attributes.UFToggleGroup("Apply")]
        [UnityEngine.HideInInspector()]
        public bool _BindApply = true;
        
        [uFrame.MVVM.Attributes.UFGroup("Apply")]
        [UnityEngine.SerializeField()]
        [UnityEngine.HideInInspector()]
        [UnityEngine.Serialization.FormerlySerializedAsAttribute("_Applybutton")]
        protected UnityEngine.UI.Button _ApplyButton;
        
        [uFrame.MVVM.Attributes.UFToggleGroup("Resolution")]
        [UnityEngine.HideInInspector()]
        public bool _BindResolution = true;
        
        [uFrame.MVVM.Attributes.UFGroup("Resolution")]
        [UnityEngine.SerializeField()]
        [UnityEngine.HideInInspector()]
        [UnityEngine.Serialization.FormerlySerializedAsAttribute("_ResolutiononlyWhenChanged")]
        protected bool _ResolutionOnlyWhenChanged;
        
        public override string DefaultIdentifier {
            get {
                return base.DefaultIdentifier;
            }
        }
        
        public override System.Type ViewModelType {
            get {
                return typeof(SettingScreenViewModel);
            }
        }
        
        public SettingScreenViewModel SettingScreen {
            get {
                return (SettingScreenViewModel)ViewModelObject;
            }
        }
        
        protected override void InitializeViewModel(uFrame.MVVM.ViewModels.ViewModel model) {
            base.InitializeViewModel(model);
            // NOTE: this method is only invoked if the 'Initialize ViewModel' is checked in the inspector.
            // var vm = model as SettingScreenViewModel;
            // This method is invoked when applying the data from the inspector to the viewmodel.  Add any view-specific customizations here.
            var settingsscreenview = ((SettingScreenViewModel)model);
            settingsscreenview.Resolution = this._Resolution;
            settingsscreenview.Volume = this._Volume;
        }
        
        public override void Bind() {
            base.Bind();
            // Use this.SettingScreen to access the viewmodel.
            // Use this method to subscribe to the view-model.
            // Any designer bindings are created in the base implementation.
            if (_BindVolume) {
                this.BindSliderToProperty(_VolumeSlider, this.SettingScreen.VolumeProperty);
            }
            if (_BindDefault) {
                this.BindButtonToCommand(_DefaultButton, this.SettingScreen.Default);
            }
            if (_BindApply) {
                this.BindButtonToCommand(_ApplyButton, this.SettingScreen.Apply);
            }
            if (_BindResolution) {
                this.BindProperty(this.SettingScreen.ResolutionProperty, this.ResolutionChanged, _ResolutionOnlyWhenChanged);
            }
        }
        
        public virtual void ResolutionChanged(ResolutionInformation arg1) {
        }
        
        public virtual void ExecuteDefault(DefaultCommand command) {
            command.Sender = SettingScreen;
            SettingScreen.Default.OnNext(command);
        }
        
        public virtual void ExecuteApply(ApplyCommand command) {
            command.Sender = SettingScreen;
            SettingScreen.Apply.OnNext(command);
        }
    }
}
