// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace Example {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using uFrame.Kernel;
    using uFrame.Kernel.Serialization;
    using uFrame.MVVM;
    using uFrame.MVVM.Bindings;
    using uFrame.MVVM.Services;
    using uFrame.MVVM.ViewModels;
    using UniRx;
    using UnityEngine;
    
    
    public class LoginScreenViewBase : SubScreenView {
        
        [UnityEngine.SerializeField()]
        [uFrame.MVVM.Attributes.UFGroup("View Model Properties")]
        [UnityEngine.HideInInspector()]
        public String _Username;
        
        [UnityEngine.SerializeField()]
        [uFrame.MVVM.Attributes.UFGroup("View Model Properties")]
        [UnityEngine.HideInInspector()]
        public String _Password;
        
        [uFrame.MVVM.Attributes.UFToggleGroup("Username")]
        [UnityEngine.HideInInspector()]
        public bool _BindUsername = true;
        
        [uFrame.MVVM.Attributes.UFGroup("Username")]
        [UnityEngine.SerializeField()]
        [UnityEngine.HideInInspector()]
        [UnityEngine.Serialization.FormerlySerializedAsAttribute("_Usernameinput")]
        protected UnityEngine.UI.InputField _UsernameInput;
        
        [uFrame.MVVM.Attributes.UFToggleGroup("Password")]
        [UnityEngine.HideInInspector()]
        public bool _BindPassword = true;
        
        [uFrame.MVVM.Attributes.UFGroup("Password")]
        [UnityEngine.SerializeField()]
        [UnityEngine.HideInInspector()]
        [UnityEngine.Serialization.FormerlySerializedAsAttribute("_Passwordinput")]
        protected UnityEngine.UI.InputField _PasswordInput;
        
        [uFrame.MVVM.Attributes.UFToggleGroup("Login")]
        [UnityEngine.HideInInspector()]
        public bool _BindLogin = true;
        
        [uFrame.MVVM.Attributes.UFGroup("Login")]
        [UnityEngine.SerializeField()]
        [UnityEngine.HideInInspector()]
        [UnityEngine.Serialization.FormerlySerializedAsAttribute("_Loginbutton")]
        protected UnityEngine.UI.Button _LoginButton;
        
        public override string DefaultIdentifier {
            get {
                return base.DefaultIdentifier;
            }
        }
        
        public override System.Type ViewModelType {
            get {
                return typeof(LoginScreenViewModel);
            }
        }
        
        public LoginScreenViewModel LoginScreen {
            get {
                return (LoginScreenViewModel)ViewModelObject;
            }
        }
        
        protected override void InitializeViewModel(uFrame.MVVM.ViewModels.ViewModel model) {
            base.InitializeViewModel(model);
            // NOTE: this method is only invoked if the 'Initialize ViewModel' is checked in the inspector.
            // var vm = model as LoginScreenViewModel;
            // This method is invoked when applying the data from the inspector to the viewmodel.  Add any view-specific customizations here.
            var loginscreenview = ((LoginScreenViewModel)model);
            loginscreenview.Username = this._Username;
            loginscreenview.Password = this._Password;
        }
        
        public override void Bind() {
            base.Bind();
            // Use this.LoginScreen to access the viewmodel.
            // Use this method to subscribe to the view-model.
            // Any designer bindings are created in the base implementation.
            if (_BindUsername) {
                this.BindInputFieldToProperty(_UsernameInput, this.LoginScreen.UsernameProperty);
            }
            if (_BindPassword) {
                this.BindInputFieldToProperty(_PasswordInput, this.LoginScreen.PasswordProperty);
            }
            if (_BindLogin) {
                this.BindButtonToCommand(_LoginButton, this.LoginScreen.Login);
            }
        }
        
        public virtual void ExecuteLogin(LoginCommand command) {
            command.Sender = LoginScreen;
            LoginScreen.Login.OnNext(command);
        }
    }
}
