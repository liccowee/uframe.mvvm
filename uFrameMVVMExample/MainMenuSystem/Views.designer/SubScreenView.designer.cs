// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace Example {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using uFrame.Kernel;
    using uFrame.Kernel.Serialization;
    using uFrame.MVVM;
    using uFrame.MVVM.Bindings;
    using uFrame.MVVM.Services;
    using uFrame.MVVM.ViewModels;
    using UniRx;
    using UnityEngine;
    
    
    public class SubScreenViewBase : uFrame.MVVM.Views.ViewBase {
        
        [UnityEngine.SerializeField()]
        [uFrame.MVVM.Attributes.UFGroup("View Model Properties")]
        [UnityEngine.HideInInspector()]
        public Boolean _IsActive;
        
        [uFrame.MVVM.Attributes.UFToggleGroup("IsActive")]
        [UnityEngine.HideInInspector()]
        public bool _BindIsActive = true;
        
        [uFrame.MVVM.Attributes.UFGroup("IsActive")]
        [UnityEngine.SerializeField()]
        [UnityEngine.HideInInspector()]
        [UnityEngine.Serialization.FormerlySerializedAsAttribute("_IsActiveonlyWhenChanged")]
        protected bool _IsActiveOnlyWhenChanged;
        
        [uFrame.MVVM.Attributes.UFToggleGroup("Close")]
        [UnityEngine.HideInInspector()]
        public bool _BindClose = true;
        
        [uFrame.MVVM.Attributes.UFGroup("Close")]
        [UnityEngine.SerializeField()]
        [UnityEngine.HideInInspector()]
        [UnityEngine.Serialization.FormerlySerializedAsAttribute("_Closebutton")]
        protected UnityEngine.UI.Button _CloseButton;
        
        public override string DefaultIdentifier {
            get {
                return base.DefaultIdentifier;
            }
        }
        
        public override System.Type ViewModelType {
            get {
                return typeof(SubScreenViewModel);
            }
        }
        
        public SubScreenViewModel SubScreen {
            get {
                return (SubScreenViewModel)ViewModelObject;
            }
        }
        
        protected override void InitializeViewModel(uFrame.MVVM.ViewModels.ViewModel model) {
            base.InitializeViewModel(model);
            // NOTE: this method is only invoked if the 'Initialize ViewModel' is checked in the inspector.
            // var vm = model as SubScreenViewModel;
            // This method is invoked when applying the data from the inspector to the viewmodel.  Add any view-specific customizations here.
            var subscreenview = ((SubScreenViewModel)model);
            subscreenview.IsActive = this._IsActive;
        }
        
        public override void Bind() {
            base.Bind();
            // Use this.SubScreen to access the viewmodel.
            // Use this method to subscribe to the view-model.
            // Any designer bindings are created in the base implementation.
            if (_BindIsActive) {
                this.BindProperty(this.SubScreen.IsActiveProperty, this.IsActiveChanged, _IsActiveOnlyWhenChanged);
            }
            if (_BindClose) {
                this.BindButtonToCommand(_CloseButton, this.SubScreen.Close);
            }
        }
        
        public virtual void IsActiveChanged(Boolean arg1) {
        }
        
        public virtual void ExecuteClose(CloseCommand command) {
            command.Sender = SubScreen;
            SubScreen.Close.OnNext(command);
        }
    }
}
